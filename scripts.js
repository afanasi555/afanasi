document.addEventListener('DOMContentLoaded', function() {
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const emojis = ['‚≠ê', '‚ú®', 'üí¶', 'üî•', 'üéâ', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'ü©µ', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü©∂', 'üíÖ', 'üåπ', 'üå∏', 'üå±', 'üå≥', 'üçÄ', 'üå≤', '‚õÑ', '‚òÉÔ∏è', 'üåù', 'üåö', 'üåï', 'üê±', 'üêØ', 'ü¶Å', 'ü¶Ñ', 'üê∏', 'üêò', 'üê£', 'üêü', 'üê†', 'üê°', 'ü™º', 'üêû', 'üêù', 'üçì', 'üçí', 'üçé', 'üçâ', 'üçå', 'üçç', 'üçá', 'üçî', 'ü•®', 'üçü', 'üçï', 'ü•ó', 'üç≠', 'üç¨', 'üç´', 'üç™', 'üçØ', 'ü•§', 'üéÄ', 'üéÅ', 'üéà', 'üéä', 'üéâ', 'üß®', '‚öΩ', 'üèÄ', 'üß∂', 'üìÄ', 'üíø', 'üí∏', 'üë†', '‚öúÔ∏è', 'üî±', '‚ò¢Ô∏è', '‚ò£Ô∏è'];
    const bombEmoji = 'üí£';
    const explosionEmoji = 'üí•';
    let currentLevel = 1;
    let board = [];
    let task = {};
    let movesLeft = 30;
    let score = 0;
    let previousBoard = [];

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const startGameButton = document.getElementById('startGame');
    const restartButton = document.getElementById('restartButton');
    const undoButton = document.getElementById('undoButton');
    const shopButton = document.getElementById('shopButton');

    const gameContainer = document.getElementById('game');
    const menuContainer = document.getElementById('menu');
    const boardElement = document.getElementById('board');
    const taskDisplay = document.getElementById('task');
    const levelDisplay = document.getElementById('currentLevel');
    const movesLeftDisplay = document.getElementById('movesLeft');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    startGameButton.addEventListener('click', startGame);
    restartButton.addEventListener('click', restartLevel);
    undoButton.addEventListener('click', undoMove);

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    function startGame() {
        menuContainer.style.display = 'none';
        gameContainer.style.display = 'flex';
        loadLevel(currentLevel);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è
    function loadLevel(level) {
        generateBoard();
        updateTask();
        renderBoard();
        levelDisplay.textContent = level;
        movesLeftDisplay.textContent = movesLeft;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Å–∫–∏
    function generateBoard() {
        board = Array(8).fill(null).map(() => Array(8).fill(null).map(() => generateEmoji()));
        previousBoard = JSON.parse(JSON.stringify(board)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–∞
    function generateEmoji() {
        return emojis[Math.floor(Math.random() * emojis.length)];
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    function renderBoard() {
        boardElement.innerHTML = '';
        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 8; col++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                cell.dataset.row = row;
                cell.dataset.col = col;
                cell.textContent = board[row][col];
                cell.addEventListener('click', handleCellClick);
                boardElement.appendChild(cell);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
    function handleCellClick(event) {
        const row = parseInt(event.target.dataset.row);
        const col = parseInt(event.target.dataset.col);

        if (isValidMove(row, col)) {
            makeMove(row, col);
            checkMatches();
            updateBoard();
            movesLeft--;
            movesLeftDisplay.textContent = movesLeft;
            if (movesLeft <= 0) {
                alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
                restartLevel();
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞
    function isValidMove(row, col) {
        // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        return true; // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
    }

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
    function makeMove(row, col) {
        previousBoard = JSON.parse(JSON.stringify(board)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞

        // –õ–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞
    }

    // –û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
    function undoMove() {
        if (previousBoard.length) {
            board = JSON.parse(JSON.stringify(previousBoard));
            renderBoard();
            movesLeft++;
            movesLeftDisplay.textContent = movesLeft;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    function updateTask() {
        task = {
            type: 'collect',
            target: emojis[Math.floor(Math.random() * emojis.length)],
            amount: 10 + currentLevel
        };
        taskDisplay.textContent = `–°–æ–±–µ—Ä–∏—Ç–µ ${task.amount} ${task.target}`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (3 –∏ –±–æ–ª–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö)
    function checkMatches() {
        // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –¥–æ—Å–∫–µ
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å–∫–∏
    function updateBoard() {
        renderBoard();
    }

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è
    function restartLevel() {
        movesLeft = 30;
        loadLevel(currentLevel);
    }
});
