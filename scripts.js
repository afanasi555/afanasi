const emojis = ['‚≠ê', '‚ú®', 'üí¶', 'üî•', 'üéâ', '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'ü©µ', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü©∂', 'üíÖ', 'üåπ', 'üå∏', 'üå±', 'üå≥', 'üçÄ', 'üå≤', '‚õÑ', '‚òÉÔ∏è', 'üåù', 'üåö', 'üåï', 'üê±', 'üêØ', 'ü¶Å', 'ü¶Ñ', 'üê∏', 'üêò', 'üê£', 'üêü', 'üê†', 'üê°', 'ü™º', 'üêû', 'üêù', 'üçì', 'üçí', 'üçé', 'üçâ', 'üçå', 'üçç', 'üçá', 'üçî', 'ü•®', 'üçü', 'üçï', 'ü•ó', 'üç≠', 'üç¨', 'üç´', 'üç™', 'üçØ', 'ü•§', 'üéÄ', 'üéÅ', 'üéà', 'üéä', 'üéâ', 'üß®', '‚öΩ', 'üèÄ', 'üß∂', 'üìÄ', 'üíø', 'üí∏', 'üë†', '‚öúÔ∏è', 'üî±', '‚ò¢Ô∏è', '‚ò£Ô∏è'];
const bombEmoji = 'üí£';
const explosionEmoji = 'üí•';

let currentLevel = 1;
let board = [];
let task = {};
let movesLeft = 30;
let score = 0;
let previousBoard = [];

document.getElementById('startGame').addEventListener('click', startGame);
document.getElementById('restartButton').addEventListener('click', restartLevel);
document.getElementById('undoButton').addEventListener('click', undoMove);

function startGame() {
    document.getElementById('menu').style.display = 'none';
    document.getElementById('game').style.display = 'flex';
    loadLevel(currentLevel);
}

function loadLevel(level) {
    generateBoard();
    updateTask();
    renderBoard();
    document.getElementById('currentLevel').textContent = level;
    document.getElementById('movesLeft').textContent = movesLeft;
}

function generateBoard() {
    board = Array(8).fill(null).map(() => Array(8).fill(null).map(() => generateEmoji()));
    previousBoard = JSON.parse(JSON.stringify(board)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞
}

function generateEmoji() {
    return emojis[Math.floor(Math.random() * emojis.length)];
}

function renderBoard() {
    const boardElement = document.getElementById('board');
    boardElement.innerHTML = '';
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.row = row;
            cell.dataset.col = col;
            cell.textContent = board[row][col];
            cell.addEventListener('click', handleCellClick);
            boardElement.appendChild(cell);
        }
    }
}

function handleCellClick(event) {
    const row = parseInt(event.target.dataset.row);
    const col = parseInt(event.target.dataset.col);

    if (isValidMove(row, col)) {
        makeMove(row, col);
        checkMatches();
        updateBoard();
        movesLeft--;
        document.getElementById('movesLeft').textContent = movesLeft;
        if (movesLeft <= 0) {
            alert('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.');
            restartLevel();
        }
    }
}

function isValidMove(row, col) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä—è–¥–æ–º –µ—Å—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)
    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏:
    return true; // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
}

function makeMove(row, col) {
    previousBoard = JSON.parse(JSON.stringify(board)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ö–æ–¥–∞

    // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å —Å–æ—Å–µ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º)
    // –ü—Ä–∏–º–µ—Ä:
    // let temp = board[row][col];
    // board[row][col] = board[row][col + 1];
    // board[row][col + 1] = temp;
}

function undoMove() {
    if (previousBoard.length) {
        board = JSON.parse(JSON.stringify(previousBoard));
        renderBoard();
        movesLeft++;
        document.getElementById('movesLeft').textContent = movesLeft;
    }
}

function updateTask() {
    task = {
        type: 'collect',
        target: emojis[Math.floor(Math.random() * emojis.length)],
        amount: 10 + currentLevel
    };
    document.getElementById('task').textContent = `–°–æ–±–µ—Ä–∏—Ç–µ ${task.amount} ${task.target}`;
}

function checkMatches() {
    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç—Ä—ë—Ö –∏ –±–æ–ª–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    for (let row = 0; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            if (board[row][col] === task.target) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 3 –∏ –±–æ–ª–µ–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–¥—Ä—è–¥
                // –ï—Å–ª–∏ –¥–∞, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
            }
        }
    }
}

function updateBoard() {
    // –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    renderBoard();
}

function createBomb(row, col) {
    board[row][col] = bombEmoji;
}

function explodeBomb(row, col) {
    // –õ–æ–≥–∏–∫–∞ –≤–∑—Ä—ã–≤–∞ –±–æ–º–±—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∑–æ–Ω–µ 4—Ö4)
    for (let r = row - 2; r <= row + 2; r++) {
        for (let c = col - 2; c <= col + 2; c++) {
            if (r >= 0 && r < 8 && c >= 0 && c < 8 && board[r][c] !== bombEmoji) {
                board[r][c] = generateEmoji(); // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–∫—Ç
            }
        }
    }
    renderBoard();
}

function restartLevel() {
    movesLeft = 30;
    loadLevel(currentLevel);
}
